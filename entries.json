{
	"entries":[
		{
		"date":"04/13/2015",
		"title":"And It Starts!",
		"text":"<p>Auto-bot-attacking Twitter feeds. Isn't that something people are supposed to get arrested for? At least it sounds like it should be! But, apparently not, because this is the first lab task I am instructed to do within my first hour of my first day at developer boot camp. 6 days a week, 10 hours each day, for the next 4 months. Does that sound like a job? That's probably because it is. A job and a half, actually. For 60 hours each week, I'm going to be put through the tech ringer, have my mind stretched, put to the test, and supposedly emerge 120 days later as a full-stack software developing butterfly. At least, this is my hope. It's been a while since I was this excited about something like I am today, starting my training! In the process of living, I find that my life has largely been one big \"catch up,\" constantly one step behind where I need to be, both literally and figuratively. By any other means, second best, I feel, would lend itself as a better description of who I was. Something needed to change, and fast. Fast forward to present; I am presented with an opportunity to fully immerse myself in learning a new skill...a new skill that will propel me into the future. A new skill that will allow me to explore the infinite possibilities of pure creation and challenges. A new skill that is, by definition, \"future-proof!\" ...because with it, I will always be writing that future! Today I start gaining the ability to more efficiently communicate with one of my old friends...that hunk of silicon and wire that has, until now, lent itself more as a fun tool than a stepping stone into the forefront of technology. I am going to learn how to communicate in a new language...an unspeakable language. A language of zeros and ones, pluses and minuses, yeses and nos. I am going to voluntarily become a tech geek. I am going to learn how to develop code. But, more importantly, I am going to learn how to develop myself. Develop myself into a better, well-rounded person. Develop my curiosity for the mysticism that is programming. Develop myself into someone who takes life by the horns and refuses to go down without a fight. Because, like software, life is binary as well. Binary oppositions, highs and lows, haves and have-nots. I refuse to get left behind. I refuse to look back on my life when I'm old wishing I had done more to make something of myself. I refuse to be a have-not. My time is now and I choose \"Yes.\" So bring it on. I am eager and waiting!<p/>"
		},
		{
		"date":"04/14/2015",
		"title":"Gitting It?",
		"text":"<p>Yesterday, we were introduced to an application called Git. After a morning spent liberating the imprisioned Twitter API from its bleak pythonic confines in an effort to troll the web,* our afternoon shenanigans were sure to be a walk in the park! But, alas, as we started delving deeper into our exercise, its diff-erence was made clear. Stage, Commit, Push, Pull? Wait, don't Push yet. First we need to Clone. Merge? Fork? What the heck? Can't we just press \"Save?\" Oh, if it were only that simple. This wasn't your grandma's refrigerator notepad. Collaboration, we would soon find out, is the key to successful developing and our ticket to a bug-free code. Git would get us there. And like any good cliche will tell you, two heads are always better than one. After lunch, we could have probably had ten heads and still been lost. The whole group was readily confused...which I further learned makes up about 50% of a developer's time...along with 10% trance-like states of pure coding bliss, 30% caffeine, and 10% cat jokes. All day we may as well have been talked to in Greek...a language I know nothing about. But, through trial and error, and clues and application, I picked up on bits and pieces, whetting my appetite and encouraging me to move forward. This method, I think, will prove to be my metaphorical Rosetta Stone. As the afternoon rolled along, I found myself running through the moves with greater ease than before and a pseudo tech-muscle-memory presented itself allowing my first fleeting glimpse of that bliss. A Developer's High is what they call it. 9 hours and 30 minutes of my day I spent in confusion, but that last 30 minutes of \"I get it now!\" sure did make it all worth it! Now, let's just hope I remember it too!<p/><p>*This blog does not condone the use of illegal activities or mayhem, and at no time shall the reader assume vague details promote or deduce a presence of them.** <br/> **Twitter's lawyers made me write this.<p/>"
		},
		{
		"date":"04/15/2015",
		"title":"Squeezed By Python",
		"text":"<p>Today was our first full day of learning what we merely played with yesterday. Recess is over. This is our trial by fire...or, more like baptizm by it. Can't figure something out? Then do something about it until you can! There is no turning back now. We are fully committed to becoming coding gods. (Wait...committed, or committed?) ...And, yet, with less than 48 hours into class, I feel like we've been doing this for a lot longer! I guess that makes sense, though. With the accelerated immersion we've so dutifully taken upon ourselves, I remind myself every three hours that pass equate to a full week of a collegiate classes. But college classes are for sissies. This is the big leagues. We are at the adult table now.<p/><p>8am greeted us with an introduction to strings, arrays, variables, and Booleans. That math I thought I would most definitely leave in high school has just come back to haunt me. Why can't \"x\" just realize it will never equal the greatness of other integers? And why is it always so secretive?! Just say what you want to be, already! After lecture, we manned our battle stations to begin the first lab of the day. Funny...what was slightly foreign to me yesterday seemed to translate with more ease today. Cmd? Open. Notebooks? Set. Git? Cloned. Python?  -?-  ahem...Python?! *crickets* Okay, so maybe I was a little too cocky about my mad coding skills. == True. I won't be tomorrow. == False.<p/><p>If/Else statements followed lunch, and with them we quickly realized how Python could be less of a mashup of jibberish and more of a great tool...through the ever-so-sophisticated learning tool of video game development! We were tasked with building a dice game! After collaborating to discuss rules and objectives, we split into pairs to begin development. It is at this point I would like to note that there is a guy in camp who was probably, if not most-definitely coding in the womb. He knows it all. In fact, he could probably teach this class. This is child's play to him. In a moment of curious and awesome wonder, as I shielded my eyes from the blinding emination of 1s and 0s coming from his coding being, I asked him why he was even taking the class. He responded, \"For the collaborative element.\" All I can say is \"Thank goodness for that,\" because that source sensai was now collaborating with me...as my project partner. I am in boot camp right now. But in the next two hours, I upgraded to Marine Op and Ranger Training all-in-one! If ever there was a time when I felt so empowered, yet helpless at the same time, it was then. That was coding on crack! I learned so much from him! Loops, variables, random integers, debugging...and it all came together in one beautifully written, albeit visually ugly Unicode game. We kicked butt! This thing was slick! My first piece of useful code in less than 2 days. \"X\" was definitely equalling awesome at that moment. I was on a major high! ...and those two hours flew by! Such a cool feeling! I can't wait to do another one!<p/><p>Remember how I said everything is Binary? Too bad I was just on Cloud Nine. Our next Lab was coming up and, in retrospect, I should have probably taken a break after writing the game. Despite my high, my brain was fried from extreme over-thinking, and I quickly realized this when I found myself re-reading the first lab question 20 times and still not getting it. How did that happen?! I was just on fire?! Surly I could handle five more questions! Nope! The next two hours, unlike the last two, dragged, and with each new failed trial and error I tested, my excitement and brain quickly faded. I was checking out. Not to be undone by a few lines of code, I desparately turned to my friend Google in a last ditch effort to redeem my might. Fate wouldn't have it and at 5:30, SCRUM was called...less than half way through my final lab. Our SCRUM is a real-world simulation of a meeting with the same name in which developers meet after a long day to discuss their thoughts and progress from their individual or group projects. After meeting to discuss our day and collaborations, I meekly walked back to my computer, deflated by the pending doom waiting my return...a snake so vicious and conniving, it's muscular grasp seized me from afar. For the next two hours, I fought tooth and nail to figure out how to reorder lists, verify email inputs, and twist Booleans. But I fought hard. I would not let this snake squeeze the life out of me. I showed it human muscle. And I won...two hours later. As I packed up and walked to my car, brain dead and tired, I found myself eager for tomorrow. Despite the emotional roller coaster that was my day, I compare it akin to a good workout. I leave the gym sore but feeling good. Well, today, my brain got one hell of a workout...but that guy is itching for more! After all, I'm in this to the end...the just-fired spark of a human coding machine!<p/>"
		},
		{
		"date":"04/16/2015",
		"title":"A Can Of Raid",
		"text":"<p>\"Return a string which is the concatenation of the strings in the iterable iterable.\" You may read that again if you would like. I did...multiple times, actually. Prior to continuing here, I should probably mention something. Last night, when I left the lab, claiming to have \"gotten\" it, I was not entirely accurate. I got it so much as the way a wad of chewing gum would get a leaky dam to hold. It was a temporary fix to an infinitely greater problem (But I'm definitely counting my little victories here...at least I was dry again!). After getting home, that sticky gum started to leak in my mind after I ran the code through my .function(brain). There were so many bugs and vulnerabilities to my logic. So, in an effort to redeem myself, I entered the lab this morning with a rested and fresh look at my intimate friend, Problem Number 5 from Lab 4: How to confirm a valid email address in Python. It sounds easy enough, right? After all, we enter our emails into forms everyday, none the wiser about whether it is accurate or not. It just works. But let me tell you, behind the scenes, deep underneath the pretty facade of any website or software, there is an army of human-developed code that needs to run flawlessly and simulate human intelligence pertaining to simple functions we take for granted. Here in-lies my problem. How to write that. The quote above is actually the definition of what a str.join() function does. Still not making sense? Yeah...for me neither. I needed to figure out how to produce an \"Invalid\" message for an email address outside of \"valid\" form; \".com\" in the wrong place, multiple \"@\"s, not actually containing an \"@,\" containing spaces, or starting with a number. In a \"grasping at straws\" attempt to solve my problem, I read through each Python function definition in the directory with a hope that one would tell me what I was looking for...the ability to confirm if the \".com\" or \".org\" or \".io\" or \".cc\" or any other suffix was at the end of the address and not in the middle. None did. 2 hours later. Same place. Enter my friendly neighborhood coding guru, my lab partner from yesterday. I should let you know that I am about 22 hours into my training at this point. I have no idea what I can or can't do pertaining to syntax (grammar) or permissions (what I can actually do with the data I have). My lab partner, lets call him Jim for anonymity sake, suggests I look at the .find() function and analyze how the \".\" in the suffix relates to the \"@\" in the address. In other words, does it come before or after? *Light Bulb!* When a Python string (the email address in this case) evaluates itself, it breaks each character into an ordered number, or index, list (i.e. [0,1,2,3,4...etc]). The .find() function allowed me to find that \".\" and find that \"@,\" subtract the number of the former from the number of the later, and see if that difference was greater than or equal to 1. If that was TRUE, the \".\" would always fall after the \"@.\" So incredibly simple! ...now that I know it! But I do get it. Even though I'm only into my third day, all of these problems I've run into are actually learning experiences. ...and they will stick with me! I went back to our older labs later in the morning and looked at the problems I was stuck on before. They seem so easy to me now and I re-did them in my mind with little effort! This is very refreshing and, also, inspiring. If I can do this now, imagine where I will be in three months!<p/><p>Lunch breaks are getting easier also. On Monday, 30 minutes only lasted 15, relatively. Today, I think we are up to 20, and I returned with time to spare. Meeting in the \"luxury suite,\" our group collaborated to write a Python game that mimicked a very popular group game. For legal purposes, I've been told not to name it here, but I'll give you a hint: It rhymes with \"Schmapples to Schmapples.\" This was a fun session because all of our skills and expertise levels combined for the first time. Where one person did not know something, another could interject, and what would have been hard as an individual project now became easy. The six of us ensured each person had a grasp of the task at hand and didn't move forward until we all did. I can definitely see how SCRUM and collaboration work well if this is any indication of the \"real world.\" Starting out, I was a bit shaky on terms, but as the code flowed, I became a lot more comfortable. It's like seeing someone you think you know from afar...at a distance, one may doubt their identity, but as that person gets closer, certainty is eminent.<p/><p>If I have noticed one thing about my personal development over the past few days, it is this; I have gone through so many highs and lows and certainties and doubts, but with each fallback, I find I emerge one step ahead of where I was before. I'll tell you also, that may change tomorrow when I get into my next big bind, but for now I'm good. I have a feeling this will be the norm for the next few weeks as I slowly get a grasp on this new information. There are people here with all different knowledge bases, and each will learn at his own level and speed...myself included. But, I can do this. That is reassuring to me, right now, as I write this. Life is good.<p/>"
		},
		{
		"date":"04/17/2015",
		"title":"Grammar Matters",
		"text":"<p>When writing code, there is a very simplistic, yet extremely important variable that needs to be factored into any creation. It's called syntax. ...and this little guy will determine if your program runs beautifully or crashes into a firey ball of binary gibberish. Worst case scenario? Your computer crashes. ...wait... Actually, let me rephrase that. That is the worst case scenario for a user. The worst case scenario for the developer, me, in this case, would be the program not working when it's supposed to and I spend the next three hours digging line-by-line through my logic, ready to pull out my hair, only to find that, instead of a \":\" on Line 1247, I typed a \";\". Yep, folks...that's about all it takes...and it has happened to me already. I'm sure it will happen many more times also. Syntax is, essentially, the grammar of any computer code and adhering to it is extremely important. When we are talking with another human being and mess up our grammar, that human is able to logically deduce what we are trying to say and move forward with understanding our words. However, with a computer, it cannot deduce anything we do not tell it to. Computers are essentially dumb. Unless a human tells it what to do, it won't do it...and they take things very literally. A syntax error to a computer is the equivalent of speaking with a \"grammar nazi\"...you can't move forward unless you correct your error.<p/><p>While we are on the topic of technicalities, something else I discovered today was the importance of accurately naming variables. When assigning variables in Python, or any other language, I could name them anything I want. Anything at all. If I wanted \"barney\" to equal \"purple dinosaur\" or \"my address\" to equal \"6100,\" that would be just as accurate as making \"barney\" equal to \"creeper.\" ...wait. Bad example. Let's try that again. It would be just as accurate as making \"colorblue\" equal to \"red.\" You can write anything. So, in an effort to make developing easier, variables should be short, but as descriptive as possible. Today we revisited the dice games from Tuesday and presented our code to the whole group. As coding is like writing or speaking, in the sense that each person's will be different while still accomplishing the same outcome, all of our game variables were given different, yet similar names. If I write PlayerOneRoll to equal Player One's roll in the dice game, that would make immediate sense. If I wrote P1R to equal the same thing, that would also make immediate sense...only to me, though. If someone else read my code without any idea of what I was writing, he might have a very hard time deducing that \"P1R\" defines the roll of Player One. Therefore, in an effort to make collaboration easier, I can do one of two things. If I do not want to write \"PlayerOneRoll\" 50 times, I can abbreviate it \"P1R\" while, at the same time, making a #comment as a key to deciphering the name. Or, I can make the variable P1R = PlayerOneRoll. Either way works. But this is necessary to make sure I, or others, don't get confused...and when someone is writing thousands of lines of code, it is very easy to get contused. This just makes it harder to do.<p/<p>Today we also, officially, dipped our toes in Loops and Functions. I say \"officially\" because Jim and I already put a few loops into our dice game even though we were technically not supposed to. Loops are an element of a program that run over and over until told to stop. So, one could write a loop with no stops and it would run, infinitely, until the computer died. This is one way computers crash...when their memory gets eaten up by the open loop. When working properly, they significantly reduce the amount of code needed by automating redundant tasks. Functions are tools, also, used to define a set order of actions. Like loops, they are designed so coders do not have to type as much, leading to simpler and more understandable code. This sounds easy. ...and it is to understand on paper. But for a Noob like me, this is very complex to actually execute. As a developer, I need to establish a completely new method of thinking. I have to think like a computer. I need to spell it all out. And I can tell you after our first exercise in using loops and functions, it is not easy. I am officially brain dead right now...checked out. I am looking forward to exploring what I learned today further, but I need a few hours off. I'm hoping that will allow me to think clearer. Kirk out.  "
		},
		{
		"date":"04/18/2015",
		"title":"One Down, 11 To Go!",
		"text":"<p>So, I had a mini breakdown this morning. I think the severity of the matter was slightly compounded by the fact that, yesterday I left how I did. In a three-hour period today, I went back and forth, 5 times, between, \"I can do this\" to \"I'm a miserable failure and nothing I do will ever amount to anything.\" Coincidentally, that was also how many problems we had to solve in our Fifth Lab activity. Seeing a pattern? My roller coaster continues. These loops and functions problems look small, but are quite deceptive! They tested our ability to write much shorter and more efficient code. I eventually got through all 5...three hours later...and felt a lot better, but they were a challenge. On the bright side, though, I figured them out and that is something I'm proud of.<p/><p>After lunch we had our first Coding Challenge! ...and for me, what made this activity exciting, more than actually finishing it, complete and working, was the fact that, when challenged, my mind immediately knew where I needed to go with relation to writing the code. I visualized the functions and loops I needed to complete -before- I wrote them! ...and after a week of execution confusion, that was -such- an awesome feeling! Writing today, I discovered, sometimes, less detail, is actually more...which completely contradicts what I realized yesterday with relation to variable naming. I feel my desire to define -everything- sometimes leads to a more bloated code than what was needed. Sometimes we don't need to include everything. Finding a balance between the right and wrong levels of detail is something I'm going to need to discover and I imagine that will only come with experience.<p/><p>I had my first unintentional coding pun this afternoon and it made me legitimately laugh for a few minutes. I was speaking with my instructor about my code when I told him that part of it \"threw me for a loop.\" Ha! Even now, hours later, I still think that was pretty funny!<p/><p>So, here I am, five days into coding, after starting on Monday with extremely limited knowledge in the field. What have I accomplished this week? For starters, I have started to think more like a computer. Computational Thinking is what they call it, and it is all based on logic...how things work. Humans can naturally extrapolate implications, mannerisms, tone, unspoken language, along with logic. A computer cannot. A computer cannot feel. It cannot have opinions or thoughts. It can only execute what it is exactly told to do...by a human. Being able think in a manner that conveys that, blatantly and without subject, takes an adjustment. I have also learned a good amount of Python this week. I understand it is a basic language, but given my background, what I know now compared with what I knew at the beginning of the week is a huge difference. The code I looked at on Monday with utter confusion is now code I can actually -read-, as makes sense to me. I can do a basic level of writing and debugging. I can speak in pseudocode. I can visualize basic conceptions of what I need to write before I write it. These new skills might not be perfect, but they are improving. I can see it daily. And if I've done all this in just one week, imagine where I will be in 11 more! I cannot wait to see!"
		},
		{
		"date":"04/20/2015",
		"title":"Lost",
		"text":"<p>I am so lost. And to make matters worse, I don't even know what I don't know. I am frustrated because I know what I need to do, but I don't know how to do it. That is really disheartening. In today's coding exercises, it got to the point where I was just randomly doing trial and errors...just to see if things work. I don't understand what I am doing at all. I feel like there should have been a class before this...some sort of prerequisite. There are 6 people in this cohort. One does not even need to be here, one has already taken a bootcamp, one has previous random coding experience...and then there are three others -- two others and me -- who are complete newbies. I feel like the material is getting presented at the level of the experienced three. ...and even the other two who seem to be with me are not looking for extra help. So are they \"getting it\" more than me? Am I the lowest in this class? Why am I not getting this? I feel like a joke. This is so frustrating, and, writing this, I really do not feel like continuing. ...which further frustrates me because, if I quit, I will be quitting. I am slowly checking out, though. I am lost. Not being here, at least, right now, seems better than being here.<p/>"
		},
		{
		"date":"04/21/2015",
		"title":"Weathering The Storm (Tuesday: Part I)",
		"text":"<p>When I was a pilot, occasionally, we would fly directly into a thunderstorm. This was by accident, of course, as sometimes, storms simply pop-up without warning or notice...but it would happen regardless. If you have never flown through a thunderstorm, let me tell you, it is probably the last place an airplane should be...turbulence, lightning, crazy wind-sheer...in a storm, these are all things that make an airplane akin to a bowling ball in the back of a pickup. To escape after flying into one, instinct would be to turn around and leave the way you came in...after all, logic says it was clear behind you. But logic, in this case, happens to be wrong. After flying into that storm, it continued to develop and, what was once clear behind you, may be a storm now also. Additionally, if a pilot tries to turn around, that bank angle significantly reduces the amount of upward lift on the aircraft and hampers its ability to stay \"up\"...especially if that plane hits a major downward draft (which is quite common in a storm's mature stage) while doing so. So, in an effort to negate our logic, when training to become a pilot, students are taught the following about this scenario...if caught in a storm, only do two things; try to maintain straight and level flight (which might be very difficult) and continue flying straight through the storm. If it sounds like a crap-shoot, it may very well be...but this method actually has the greatest chance of getting any pilot safely out of this scary situation.<p/><p>What is all this about?<p/><p>I just flew, inadvertently, into a storm.<p/><p>...I had no idea it would be here, and yet, here I am. I cannot turn around and go back. I cannot quit and land. I need to keep on moving forward. I need to weather the wind sheer, the lightning, and the turbulence. I need to maintain straight and level flight and keep on flying. It might not be easy, but I need to -try to- regardless. This is the only way I'm going to make it."
		},
		{
		"date":"04/21/2015",
		"title":"The New Outlook (Tuesday: Part II)",
		"text":"Yesterday we were assigned two projects to complete by the end of this week. The first was an individual project...a fun program we wanted to make...and could be anything. Considering myself an efficiency-seeking being, I searched my brain to think of some sort of .utility() I could make in an effort to do .something(faster, easier). Return Nothing. else: after some research I decided to create a text-based adventure game based on the board game \"Settlers of Catan.\" As I started to contemplate pseudocode, I grew quite excited about the potential of the final product...which is weird because video games have never really interested me. The game would have a player move from one terrain hex to the other, while maintaining a reference of where he is. In essence, walking around in a textual map. This is, at least, at the most basic level, what I wanted to accomplish. Once completed I could add more prompts in each hex for the player to interact with the environment, but I figured the former would be good...for now. Thinking about how I was going to build this, if/else statements originally came to mind. However, given the way those work, the amount needed to complete my minimum viable product would be quite large, so I researched other ways to write so my program wouldn't get bloated with a ridiculous amount of code. I discovered two new concepts...Object Oriented Programming and Dictionaries. OOP essentially allows me to define specific components of my program. Using the example of a house, a room would be an object containing variables of walls, doors, floors, ceilings, and closets. Now, rather than building walls, doors, floors, ceilings, and closets each time I build a new room, I can simply say I'd like to make a new room. This method significantly cuts down on redundant code and makes reading code so much easier. The other tool I learned about was creating Dictionaries. Dictionaries are just what they sound like they are...containers that store large amounts of data and define what that data is. I can recall this data at different stages in my code much like, when writing a letter, I could use a dictionary to find out how to spell words as I write. Both of these are awesome tools and, as I learned today, significantly helped me write more efficient code. ...and on that note, I completed my MVP! This made me quite happy since I finished well before Friday's due date. Now I can add more components to my game!<p/><p>The second project we were assigned was a group project, and it will be used to simulate a professional developing environment. With it, we will be pulling geo-specific Twitter data, placing it into a database, and evaluating it to discover trends before they are trending in an effort to make our Twitter-bots, from Day 1, more efficient. There were 13 tasks that needed to be completed. Each task requires an individual to work on and upload it to GitHub. From there, we will combine all the code snippets and figure out how to make it all work together in one large program. My first job? Figuring out how to find location, trend, and tag data from a stream of tweets. To do this, I used Twitters API and Tweepy (a tool that allows external users to utilize, manipulate, and analyze real-time data from Twitter). After getting the specific data isolated, I ran into a few problems when I found a tweet that contained non-unicode characters...my program was stopping each time it encountered one. To fix this, I ended up bypassing that with a try-except statement...Try to do \"this\" except when you can't. In this instance, when it couldn't, it simply printed a message saying \"Unicode Error\" in the stream. I uploaded it and merged the file in GitHub. As there were only five initial tasks handed out by one lead-developer, we will each get one or two more as the week progresses.<p/><p>Today I came in with the mindset that, despite the difficulties I'm experiencing here, I need to keep on moving through the program. I need to stay straight and level. Lightning might strike again. Turbulence will happen. I need to accept that. I can't turn around. I can't quit. I need to navigate my way through the obstacles and dark clouds. I need to fly."
		},
		{
		"date":"04/22/2015",
		"title":"Workday Wednesday",
		"text":"Today was a work day. With it, we were able to focus on completing all of our running projects. Yesterday afternoon, Python Lab 6 was uploaded and with it came four new problems to solve. Additionally, along with our personal projects, each of us was tasked, by our lead-developer Jim, with another group project task. This morning I wrote a fun little program to tell me if it is light or dark out. I know this seems easy, but when telling a computer to do it, there is logic than needs to be worked through and I got my answer down to 10 lines of code. While on the topic of \"getting stuff down,\" I have started to go back into old labs to see if I can rewrite my answers to make them cleaner. This is actually good practice and also a reminder of all the things I -have- learned. When Lab 6 was finished, I fine-tuned my personal Catan program. Movement is now fluid and bug-free. It's amazing how long debugging actually takes. Even though I moved and modified little pieces of code, It all took a few hours to do. This is where I think time flies as I get into \"the zone.\" It's quite fun. Tonight I am going to allow the player to find a boat and start sailing. My second group project task is writing a program that analyzes the collected tweets we stored in our database to finding recurring hashtags. As a starting point, I figured out how to analyze hashtags in streamed tweets first. I am hoping this translates nicely into our database collection and will finish this task tomorrow.<p/><p>I learned something extremely valuable today that really enhanced my coding-esteem. As a developer, I have the -full internet- as a resource!...including all online code! Prior to being told/permitted this today by an instructor, I was under the impression that all of my code needed to be written from scratch...and approached this program as such! This is one of the main reasons I was so frustrated before!...I knew what I wanted to write, but I didn't know how to. I was trying to lift an extremely heavy weight without the aid of an exoskeleton! Granted, I need to be able to understand any borrowed snippets from online (and I would want to also), but this is huge as I move forward! I am really hoping this aid will help, not only with my confidence in class, but also with my future development. We'll see!"
		}
	]
}