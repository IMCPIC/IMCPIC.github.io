{
	"entries":[
		{
		"date":"04/13/2015",
		"title":"And It Starts!",
		"text":"<p>Auto-bot-attacking Twitter feeds. Isn't that something people are supposed to get arrested for? At least it sounds like it should be! But, apparently not, because this is the first lab task I am instructed to do within my first hour of my first day at developer boot camp. 6 days a week, 10 hours each day, for the next 4 months. Does that sound like a job? That's probably because it is. A job and a half, actually. For 60 hours each week, I'm going to be put through the tech ringer, have my mind stretched, put to the test, and supposedly emerge 120 days later as a full-stack software developing butterfly. At least, this is my hope. It's been a while since I was this excited about something like I am today, starting my training! In the process of living, I find that my life has largely been one big \"catch up,\" constantly one step behind where I need to be, both literally and figuratively. By any other means, second best, I feel, would lend itself as a better description of who I was. Something needed to change, and fast. Fast forward to present; I am presented with an opportunity to fully immerse myself in learning a new skill...a new skill that will propel me into the future. A new skill that will allow me to explore the infinite possibilities of pure creation and challenges. A new skill that is, by definition, \"future-proof!\" ...because with it, I will always be writing that future! Today I start gaining the ability to more efficiently communicate with one of my old friends...that hunk of silicon and wire that has, until now, lent itself more as a fun tool than a stepping stone into the forefront of technology. I am going to learn how to communicate in a new language...an unspeakable language. A language of zeros and ones, pluses and minuses, yeses and nos. I am going to voluntarily become a tech geek. I am going to learn how to develop code. But, more importantly, I am going to learn how to develop myself. Develop myself into a better, well-rounded person. Develop my curiosity for the mysticism that is programming. Develop myself into someone who takes life by the horns and refuses to go down without a fight. Because, like software, life is binary as well. Binary oppositions, highs and lows, haves and have-nots. I refuse to get left behind. I refuse to look back on my life when I'm old wishing I had done more to make something of myself. I refuse to be a have-not. My time is now and I choose \"Yes.\" So bring it on. I am eager and waiting!</p>"
		},
		{
		"date":"04/14/2015",
		"title":"Gitting It?",
		"text":"<p>Yesterday, we were introduced to an application called Git. After a morning spent liberating the imprisioned Twitter API from its bleak pythonic confines in an effort to troll the web,* our afternoon shenanigans were sure to be a walk in the park! But, alas, as we started delving deeper into our exercise, its diff-erence was made clear. Stage, Commit, Push, Pull? Wait, don't Push yet. First we need to Clone. Merge? Fork? What the heck? Can't we just press \"Save?\" Oh, if it were only that simple. This wasn't your grandma's refrigerator notepad. Collaboration, we would soon find out, is the key to successful developing and our ticket to a bug-free code. Git would get us there. And like any good cliche will tell you, two heads are always better than one. After lunch, we could have probably had ten heads and still been lost. The whole group was readily confused...which I further learned makes up about 50% of a developer's time...along with 10% trance-like states of pure coding bliss, 30% caffeine, and 10% cat jokes. All day we may as well have been talked to in Greek...a language I know nothing about. But, through trial and error, and clues and application, I picked up on bits and pieces, whetting my appetite and encouraging me to move forward. This method, I think, will prove to be my metaphorical Rosetta Stone. As the afternoon rolled along, I found myself running through the moves with greater ease than before and a pseudo tech-muscle-memory presented itself allowing my first fleeting glimpse of that bliss. A Developer's High is what they call it. 9 hours and 30 minutes of my day I spent in confusion, but that last 30 minutes of \"I get it now!\" sure did make it all worth it! Now, let's just hope I remember it too!</p><p>*This blog does not condone the use of illegal activities or mayhem, and at no time shall the reader assume vague details promote or deduce a presence of them.** <br/> **Twitter's lawyers made me write this.</p>"
		},
		{
		"date":"04/15/2015",
		"title":"Squeezed By Python",
		"text":"<p>Today was our first full day of learning what we merely played with yesterday. Recess is over. This is our trial by fire...or, more like baptizm by it. Can't figure something out? Then do something about it until you can! There is no turning back now. We are fully committed to becoming coding gods. (Wait...committed, or committed?) ...And, yet, with less than 48 hours into class, I feel like we've been doing this for a lot longer! I guess that makes sense, though. With the accelerated immersion we've so dutifully taken upon ourselves, I remind myself every three hours that pass equate to a full week of a collegiate classes. But college classes are for sissies. This is the big leagues. We are at the adult table now.</p><p>8am greeted us with an introduction to strings, arrays, variables, and Booleans. That math I thought I would most definitely leave in high school has just come back to haunt me. Why can't \"x\" just realize it will never equal the greatness of other integers? And why is it always so secretive?! Just say what you want to be, already! After lecture, we manned our battle stations to begin the first lab of the day. Funny...what was slightly foreign to me yesterday seemed to translate with more ease today. Cmd? Open. Notebooks? Set. Git? Cloned. Python?  -?-  ahem...Python?! *crickets* Okay, so maybe I was a little too cocky about my mad coding skills. == True. I won't be tomorrow. == False.</p><p>If/Else statements followed lunch, and with them we quickly realized how Python could be less of a mashup of jibberish and more of a great tool...through the ever-so-sophisticated learning tool of video game development! We were tasked with building a dice game! After collaborating to discuss rules and objectives, we split into pairs to begin development. It is at this point I would like to note that there is a guy in camp who was probably, if not most-definitely coding in the womb. He knows it all. In fact, he could probably teach this class. This is child's play to him. In a moment of curious and awesome wonder, as I shielded my eyes from the blinding emination of 1s and 0s coming from his coding being, I asked him why he was even taking the class. He responded, \"For the collaborative element.\" All I can say is \"Thank goodness for that,\" because that source sensai was now collaborating with me...as my project partner. I am in boot camp right now. But in the next two hours, I upgraded to Marine Op and Ranger Training all-in-one! If ever there was a time when I felt so empowered, yet helpless at the same time, it was then. That was coding on crack! I learned so much from him! Loops, variables, random integers, debugging...and it all came together in one beautifully written, albeit visually ugly Unicode game. We kicked butt! This thing was slick! My first piece of useful code in less than 2 days. \"X\" was definitely equalling awesome at that moment. I was on a major high! ...and those two hours flew by! Such a cool feeling! I can't wait to do another one!</p><p>Remember how I said everything is Binary? Too bad I was just on Cloud Nine. Our next Lab was coming up and, in retrospect, I should have probably taken a break after writing the game. Despite my high, my brain was fried from extreme over-thinking, and I quickly realized this when I found myself re-reading the first lab question 20 times and still not getting it. How did that happen?! I was just on fire?! Surly I could handle five more questions! Nope! The next two hours, unlike the last two, dragged, and with each new failed trial and error I tested, my excitement and brain quickly faded. I was checking out. Not to be undone by a few lines of code, I desparately turned to my friend Google in a last ditch effort to redeem my might. Fate wouldn't have it and at 5:30, SCRUM was called...less than half way through my final lab. Our SCRUM is a real-world simulation of a meeting with the same name in which developers meet after a long day to discuss their thoughts and progress from their individual or group projects. After meeting to discuss our day and collaborations, I meekly walked back to my computer, deflated by the pending doom waiting my return...a snake so vicious and conniving, it's muscular grasp seized me from afar. For the next two hours, I fought tooth and nail to figure out how to reorder lists, verify email inputs, and twist Booleans. But I fought hard. I would not let this snake squeeze the life out of me. I showed it human muscle. And I won...two hours later. As I packed up and walked to my car, brain dead and tired, I found myself eager for tomorrow. Despite the emotional roller coaster that was my day, I compare it akin to a good workout. I leave the gym sore but feeling good. Well, today, my brain got one hell of a workout...but that guy is itching for more! After all, I'm in this to the end...the just-fired spark of a human coding machine!</p>"
		},
		{
		"date":"04/16/2015",
		"title":"A Can Of Raid",
		"text":"<p>\"Return a string which is the concatenation of the strings in the iterable iterable.\" You may read that again if you would like. I did...multiple times, actually. Prior to continuing here, I should probably mention something. Last night, when I left the lab, claiming to have \"gotten\" it, I was not entirely accurate. I got it so much as the way a wad of chewing gum would get a leaky dam to hold. It was a temporary fix to an infinitely greater problem (But I'm definitely counting my little victories here...at least I was dry again!). After getting home, that sticky gum started to leak in my mind after I ran the code through my .function(brain). There were so many bugs and vulnerabilities to my logic. So, in an effort to redeem myself, I entered the lab this morning with a rested and fresh look at my intimate friend, Problem Number 5 from Lab 4: How to confirm a valid email address in Python. It sounds easy enough, right? After all, we enter our emails into forms everyday, none the wiser about whether it is accurate or not. It just works. But let me tell you, behind the scenes, deep underneath the pretty facade of any website or software, there is an army of human-developed code that needs to run flawlessly and simulate human intelligence pertaining to simple functions we take for granted. Here in-lies my problem. How to write that. The quote above is actually the definition of what a str.join() function does. Still not making sense? Yeah...for me neither. I needed to figure out how to produce an \"Invalid\" message for an email address outside of \"valid\" form; \".com\" in the wrong place, multiple \"@\"s, not actually containing an \"@,\" containing spaces, or starting with a number. In a \"grasping at straws\" attempt to solve my problem, I read through each Python function definition in the directory with a hope that one would tell me what I was looking for...the ability to confirm if the \".com\" or \".org\" or \".io\" or \".cc\" or any other suffix was at the end of the address and not in the middle. None did. 2 hours later. Same place. Enter my friendly neighborhood coding guru, my lab partner from yesterday. I should let you know that I am about 22 hours into my training at this point. I have no idea what I can or can't do pertaining to syntax (grammar) or permissions (what I can actually do with the data I have). My lab partner, lets call him Jim for anonymity sake, suggests I look at the .find() function and analyze how the \".\" in the suffix relates to the \"@\" in the address. In other words, does it come before or after? *Light Bulb!* When a Python string (the email address in this case) evaluates itself, it breaks each character into an ordered number, or index, list (i.e. [0,1,2,3,4...etc]). The .find() function allowed me to find that \".\" and find that \"@,\" subtract the number of the former from the number of the later, and see if that difference was greater than or equal to 1. If that was TRUE, the \".\" would always fall after the \"@.\" So incredibly simple! ...now that I know it! But I do get it. Even though I'm only into my third day, all of these problems I've run into are actually learning experiences. ...and they will stick with me! I went back to our older labs later in the morning and looked at the problems I was stuck on before. They seem so easy to me now and I re-did them in my mind with little effort! This is very refreshing and, also, inspiring. If I can do this now, imagine where I will be in three months!</p><p>Lunch breaks are getting easier also. On Monday, 30 minutes only lasted 15, relatively. Today, I think we are up to 20, and I returned with time to spare. Meeting in the \"luxury suite,\" our group collaborated to write a Python game that mimicked a very popular group game. For legal purposes, I've been told not to name it here, but I'll give you a hint: It rhymes with \"Schmapples to Schmapples.\" This was a fun session because all of our skills and expertise levels combined for the first time. Where one person did not know something, another could interject, and what would have been hard as an individual project now became easy. The six of us ensured each person had a grasp of the task at hand and didn't move forward until we all did. I can definitely see how SCRUM and collaboration work well if this is any indication of the \"real world.\" Starting out, I was a bit shaky on terms, but as the code flowed, I became a lot more comfortable. It's like seeing someone you think you know from afar...at a distance, one may doubt their identity, but as that person gets closer, certainty is eminent.</p><p>If I have noticed one thing about my personal development over the past few days, it is this; I have gone through so many highs and lows and certainties and doubts, but with each fallback, I find I emerge one step ahead of where I was before. I'll tell you also, that may change tomorrow when I get into my next big bind, but for now I'm good. I have a feeling this will be the norm for the next few weeks as I slowly get a grasp on this new information. There are people here with all different knowledge bases, and each will learn at his own level and speed...myself included. But, I can do this. That is reassuring to me, right now, as I write this. Life is good.</p>"
		},
		{
		"date":"04/17/2015",
		"title":"Grammar Matters",
		"text":"<p>When writing code, there is a very simplistic, yet extremely important variable that needs to be factored into any creation. It's called syntax. ...and this little guy will determine if your program runs beautifully or crashes into a firey ball of binary gibberish. Worst case scenario? Your computer crashes. ...wait... Actually, let me rephrase that. That is the worst case scenario for a user. The worst case scenario for the developer, me, in this case, would be the program not working when it's supposed to and I spend the next three hours digging line-by-line through my logic, ready to pull out my hair, only to find that, instead of a \":\" on Line 1247, I typed a \";\". Yep, folks...that's about all it takes...and it has happened to me already. I'm sure it will happen many more times also. Syntax is, essentially, the grammar of any computer code and adhering to it is extremely important. When we are talking with another human being and mess up our grammar, that human is able to logically deduce what we are trying to say and move forward with understanding our words. However, with a computer, it cannot deduce anything we do not tell it to. Computers are essentially dumb. Unless a human tells it what to do, it won't do it...and they take things very literally. A syntax error to a computer is the equivalent of speaking with a \"grammar nazi\"...you can't move forward unless you correct your error.</p><p>While we are on the topic of technicalities, something else I discovered today was the importance of accurately naming variables. When assigning variables in Python, or any other language, I could name them anything I want. Anything at all. If I wanted \"barney\" to equal \"purple dinosaur\" or \"my address\" to equal \"6100,\" that would be just as accurate as making \"barney\" equal to \"creeper.\" ...wait. Bad example. Let's try that again. It would be just as accurate as making \"colorblue\" equal to \"red.\" You can write anything. So, in an effort to make developing easier, variables should be short, but as descriptive as possible. Today we revisited the dice games from Tuesday and presented our code to the whole group. As coding is like writing or speaking, in the sense that each person's will be different while still accomplishing the same outcome, all of our game variables were given different, yet similar names. If I write PlayerOneRoll to equal Player One's roll in the dice game, that would make immediate sense. If I wrote P1R to equal the same thing, that would also make immediate sense...only to me, though. If someone else read my code without any idea of what I was writing, he might have a very hard time deducing that \"P1R\" defines the roll of Player One. Therefore, in an effort to make collaboration easier, I can do one of two things. If I do not want to write \"PlayerOneRoll\" 50 times, I can abbreviate it \"P1R\" while, at the same time, making a #comment as a key to deciphering the name. Or, I can make the variable P1R = PlayerOneRoll. Either way works. But this is necessary to make sure I, or others, don't get confused...and when someone is writing thousands of lines of code, it is very easy to get contused. This just makes it harder to do.<p/<p>Today we also, officially, dipped our toes in Loops and Functions. I say \"officially\" because Jim and I already put a few loops into our dice game even though we were technically not supposed to. Loops are an element of a program that run over and over until told to stop. So, one could write a loop with no stops and it would run, infinitely, until the computer died. This is one way computers crash...when their memory gets eaten up by the open loop. When working properly, they significantly reduce the amount of code needed by automating redundant tasks. Functions are tools, also, used to define a set order of actions. Like loops, they are designed so coders do not have to type as much, leading to simpler and more understandable code. This sounds easy. ...and it is to understand on paper. But for a Noob like me, this is very complex to actually execute. As a developer, I need to establish a completely new method of thinking. I have to think like a computer. I need to spell it all out. And I can tell you after our first exercise in using loops and functions, it is not easy. I am officially brain dead right now...checked out. I am looking forward to exploring what I learned today further, but I need a few hours off. I'm hoping that will allow me to think clearer. Kirk out.</p>"
		},
		{
		"date":"04/18/2015",
		"title":"One Down, 11 To Go!",
		"text":"<p>So, I had a mini breakdown this morning. I think the severity of the matter was slightly compounded by the fact that, yesterday I left how I did. In a three-hour period today, I went back and forth, 5 times, between, \"I can do this\" to \"I'm a miserable failure and nothing I do will ever amount to anything.\" Coincidentally, that was also how many problems we had to solve in our Fifth Lab activity. Seeing a pattern? My roller coaster continues. These loops and functions problems look small, but are quite deceptive! They tested our ability to write much shorter and more efficient code. I eventually got through all 5...three hours later...and felt a lot better, but they were a challenge. On the bright side, though, I figured them out and that is something I'm proud of.</p><p>After lunch we had our first Coding Challenge! ...and for me, what made this activity exciting, more than actually finishing it, complete and working, was the fact that, when challenged, my mind immediately knew where I needed to go with relation to writing the code. I visualized the functions and loops I needed to complete -before- I wrote them! ...and after a week of execution confusion, that was -such- an awesome feeling! Writing today, I discovered, sometimes, less detail, is actually more...which completely contradicts what I realized yesterday with relation to variable naming. I feel my desire to define -everything- sometimes leads to a more bloated code than what was needed. Sometimes we don't need to include everything. Finding a balance between the right and wrong levels of detail is something I'm going to need to discover and I imagine that will only come with experience.</p><p>I had my first unintentional coding pun this afternoon and it made me legitimately laugh for a few minutes. I was speaking with my instructor about my code when I told him that part of it \"threw me for a loop.\" Ha! Even now, hours later, I still think that was pretty funny!</p><p>So, here I am, five days into coding, after starting on Monday with extremely limited knowledge in the field. What have I accomplished this week? For starters, I have started to think more like a computer. Computational Thinking is what they call it, and it is all based on logic...how things work. Humans can naturally extrapolate implications, mannerisms, tone, unspoken language, along with logic. A computer cannot. A computer cannot feel. It cannot have opinions or thoughts. It can only execute what it is exactly told to do...by a human. Being able think in a manner that conveys that, blatantly and without subject, takes an adjustment. I have also learned a good amount of Python this week. I understand it is a basic language, but given my background, what I know now compared with what I knew at the beginning of the week is a huge difference. The code I looked at on Monday with utter confusion is now code I can actually -read-, as makes sense to me. I can do a basic level of writing and debugging. I can speak in pseudocode. I can visualize basic conceptions of what I need to write before I write it. These new skills might not be perfect, but they are improving. I can see it daily. And if I've done all this in just one week, imagine where I will be in 11 more! I cannot wait to see!</p>"
		},
		{
		"date":"04/20/2015",
		"title":"Lost",
		"text":"<p>I am so lost. And to make matters worse, I don't even know what I don't know. I am frustrated because I know what I need to do, but I don't know how to do it. That is really disheartening. In today's coding exercises, it got to the point where I was just randomly doing trial and errors...just to see if things work. I don't understand what I am doing at all. I feel like there should have been a class before this...some sort of prerequisite. There are 6 people in this cohort. One does not even need to be here, one has already taken a bootcamp, one has previous random coding experience...and then there are three others -- two others and me -- who are complete newbies. I feel like the material is getting presented at the level of the experienced three. ...and even the other two who seem to be with me are not looking for extra help. So are they \"getting it\" more than me? Am I the lowest in this class? Why am I not getting this? I feel like a joke. This is so frustrating, and, writing this, I really do not feel like continuing. ...which further frustrates me because, if I quit, I will be quitting. I am slowly checking out, though. I am lost. Not being here, at least, right now, seems better than being here.</p>"
		},
		{
		"date":"04/21/2015",
		"title":"Weathering The Storm (Tuesday: Part I)",
		"text":"<p>When I was a pilot, occasionally, we would fly directly into a thunderstorm. This was by accident, of course, as sometimes, storms simply pop-up without warning or notice...but it would happen regardless. If you have never flown through a thunderstorm, let me tell you, it is probably the last place an airplane should be...turbulence, lightning, crazy wind-sheer...in a storm, these are all things that make an airplane akin to a bowling ball in the back of a pickup. To escape after flying into one, instinct would be to turn around and leave the way you came in...after all, logic says it was clear behind you. But logic, in this case, happens to be wrong. After flying into that storm, it continued to develop and, what was once clear behind you, may be a storm now also. Additionally, if a pilot tries to turn around, that bank angle significantly reduces the amount of upward lift on the aircraft and hampers its ability to stay \"up\"...especially if that plane hits a major downward draft (which is quite common in a storm's mature stage) while doing so. So, in an effort to negate our logic, when training to become a pilot, students are taught the following about this scenario...if caught in a storm, only do two things; try to maintain straight and level flight (which might be very difficult) and continue flying straight through the storm. If it sounds like a crap-shoot, it may very well be...but this method actually has the greatest chance of getting any pilot safely out of this scary situation.</p><p>What is all this about?</p><p>I just flew, inadvertently, into a storm.</p><p>...I had no idea it would be here, and yet, here I am. I cannot turn around and go back. I cannot quit and land. I need to keep on moving forward. I need to weather the wind sheer, the lightning, and the turbulence. I need to maintain straight and level flight and keep on flying. It might not be easy, but I need to -try to- regardless. This is the only way I'm going to make it.</p>"
		},
		{
		"date":"04/21/2015",
		"title":"The New Outlook (Tuesday: Part II)",
		"text":"<p>Yesterday we were assigned two projects to complete by the end of this week. The first was an individual project...a fun program we wanted to make...and could be anything. Considering myself an efficiency-seeking being, I searched my brain to think of some sort of .utility() I could make in an effort to do .something(faster, easier). Return Nothing. else: after some research I decided to create a text-based adventure game based on the board game \"Settlers of Catan.\" As I started to contemplate pseudocode, I grew quite excited about the potential of the final product...which is weird because video games have never really interested me. The game would have a player move from one terrain hex to the other, while maintaining a reference of where he is. In essence, walking around in a textual map. This is, at least, at the most basic level, what I wanted to accomplish. Once completed I could add more prompts in each hex for the player to interact with the environment, but I figured the former would be good...for now. Thinking about how I was going to build this, if/else statements originally came to mind. However, given the way those work, the amount needed to complete my minimum viable product would be quite large, so I researched other ways to write so my program wouldn't get bloated with a ridiculous amount of code. I discovered two new concepts...Object Oriented Programming and Dictionaries. OOP essentially allows me to define specific components of my program. Using the example of a house, a room would be an object containing variables of walls, doors, floors, ceilings, and closets. Now, rather than building walls, doors, floors, ceilings, and closets each time I build a new room, I can simply say I'd like to make a new room. This method significantly cuts down on redundant code and makes reading code so much easier. The other tool I learned about was creating Dictionaries. Dictionaries are just what they sound like they are...containers that store large amounts of data and define what that data is. I can recall this data at different stages in my code much like, when writing a letter, I could use a dictionary to find out how to spell words as I write. Both of these are awesome tools and, as I learned today, significantly helped me write more efficient code. ...and on that note, I completed my MVP! This made me quite happy since I finished well before Friday's due date. Now I can add more components to my game!</p><p>The second project we were assigned was a group project, and it will be used to simulate a professional developing environment. With it, we will be pulling geo-specific Twitter data, placing it into a database, and evaluating it to discover trends before they are trending in an effort to make our Twitter-bots, from Day 1, more efficient. There were 13 tasks that needed to be completed. Each task requires an individual to work on and upload it to GitHub. From there, we will combine all the code snippets and figure out how to make it all work together in one large program. My first job? Figuring out how to find location, trend, and tag data from a stream of tweets. To do this, I used Twitters API and Tweepy (a tool that allows external users to utilize, manipulate, and analyze real-time data from Twitter). After getting the specific data isolated, I ran into a few problems when I found a tweet that contained non-unicode characters...my program was stopping each time it encountered one. To fix this, I ended up bypassing that with a try-except statement...Try to do \"this\" except when you can't. In this instance, when it couldn't, it simply printed a message saying \"Unicode Error\" in the stream. I uploaded it and merged the file in GitHub. As there were only five initial tasks handed out by one lead-developer, we will each get one or two more as the week progresses.</p><p>Today I came in with the mindset that, despite the difficulties I'm experiencing here, I need to keep on moving through the program. I need to stay straight and level. Lightning might strike again. Turbulence will happen. I need to accept that. I can't turn around. I can't quit. I need to navigate my way through the obstacles and dark clouds. I need to fly.</p>"
		},
		{
		"date":"04/22/2015",
		"title":"Workday Wednesday",
		"text":"<p>Today was a work day. With it, we were able to focus on completing all of our running projects. Yesterday afternoon, Python Lab 6 was uploaded and with it came four new problems to solve. Additionally, along with our personal projects, each of us was tasked, by our lead-developer Jim, with another group project task. This morning I wrote a fun little program to tell me if it is light or dark out. I know this seems easy, but when telling a computer to do it, there is logic than needs to be worked through and I got my answer down to 10 lines of code. While on the topic of \"getting stuff down,\" I have started to go back into old labs to see if I can rewrite my answers to make them cleaner. This is actually good practice and also a reminder of all the things I -have- learned. When Lab 6 was finished, I fine-tuned my personal Catan program. Movement is now fluid and bug-free. It's amazing how long debugging actually takes. Even though I moved and modified little pieces of code, It all took a few hours to do. This is where I think time flies as I get into \"the zone.\" It's quite fun. Tonight I am going to allow the player to find a boat and start sailing. My second group project task is writing a program that analyzes the collected tweets we stored in our database to finding recurring hashtags. As a starting point, I figured out how to analyze hashtags in streamed tweets first. I am hoping this translates nicely into our database collection and will finish this task tomorrow.</p><p>I learned something extremely valuable today that really enhanced my coding-esteem. As a developer, I have the -full internet- as a resource!...including all online code! Prior to being told/permitted this today by an instructor, I was under the impression that all of my code needed to be written from scratch...and approached this program as such! This is one of the main reasons I was so frustrated before!...I knew what I wanted to write, but I didn't know how to. I was trying to lift an extremely heavy weight without the aid of an exoskeleton! Granted, I need to be able to understand any borrowed snippets from online (and I would want to also), but this is huge as I move forward! I am really hoping this aid will help, not only with my confidence in class, but also with my future development. We'll see!</p>"
		},
		{
		"date":"04/23/2015",
		"title":"Settlement to City",
		"text":"<p>I had two things to do today. 1: Finish my group assignment snippet and 2: further populate the Island of Catan. Both progressed.</p><p>As for HidroTwit, the name of our data mining twitter bot, I continued with the task I was assigned yesterday...scraping the hashtags from our database of collected tweets and group them by frequency by location. This proved to be a challenging task. Starting at 8:15, by lunch I was still not much further than I was this morning, and as a matter of observation, I must have read the same lines of code over 200 times without changing them. This is very frustrating. I was able to separate the hashtags by frequency, but not by area. To make matters worse, I felt like my syntax was, somehow, preventing me from progressing. So, in an effort to institute luck, I started tinkering with the code after lunch to see what different variations would work...if any. Success! I needed to place an embedded loop in my code and draw from an area list to separate the tags by geo-location. I committed it to Git and brushed by hands clean. I was quite happy this was finished! ...most of what we did in this project we had not been taught, but, instead, were expected to discover, learn about, and solve by ourselves...and there was a lot I didn't know! Both snippets provided a significant mental work out. As a simulation, I imagine this project accurately mimics the \"real world!\"</p><p>Part two of my day, working on my Catan game, proved to be much more fun...and productive! I made a few large leaps in its development, and worked out every bug that prohibited my traveler from moving, unimpeded, around the whole island while developing the ability for him to see what resources each terrain hex had in them. Tomorrow I will work on allowing the traveler to interact with his environment rather than just \"be\" in it. While working today, I found by studying my code, I'm able to better understand how it works. Tinkering is so much fun! As long as my working version is saved, I can break, fix, re-break, and completely change my code over and over. This was a -huge- learning tool and I feel like today has been my best day with regards to \"getting it\" since last week. That was very refreshing. This personal project has provided personal growth in the development of my coding knowledge. In \"Settlers of Catan,\" progress is made by developing certain areas of the game board with settlements. As a basic building block, these settlements only collect a small amount of resources, but are needed to advance a player's position in any way. As game-play progresses, once a player has built a number of settlements and his resources have grown, he may upgrade any settlement to a city. This becomes a huge advantage, as a city collects twice as many resources as a settlement. However, unless he already had the settlement built, he wouldn't be able to build a city from scratch. I feel like I upgraded my coding development today from a settlement to a city. I wouldn't have been able to do that without already having a foundation in place...and it did take a lot of resources to build that city...but it is an upgrade from where I was. And even though it is just a small one now, I look forward to having a budding metropolis in the near future.</p>"
		},
		{
		"date":"04/24/2015",
		"title":"Me=Me+1",
		"text":"<p>It's Friday, No. 2 here at camp and, I'd have to say, my best day yet. I did not have frustrated confusion. I did not reread lines of code, over and over, in an infinite loop. I wrote and I wrote well!</p><p>Since my HidroTwit project snippets were complete, I was at liberty, today, to solely work on my Catan project...and work on it, I did! After completing my minimum viable project (simply walking around from hex to hex), yesterday I was able to get my explorer to see specific resources in each hex. Today, I'm happy to report that, the explorer can now interact with those specific resources by picking them up and maintaining a visible inventory! To do so, I needed to write three new functions, which brings my total to 11 now, and add some more items to my dictionaries. Even though this took a few hours, I was in code-mode the whole time. I knew what I needed to do and how to accomplish it. I iterated pseudocode in my mind and translated it to the screen. I ran and reran programs. I debugged with efficiency. I was a coder! ...but more importantly, I enjoyed it. I think, above everything, enjoying it was the best part of my day. Granted, this was largely due to the fact that I knew what I needed to do and could do it (an experience I am new to)...but, the only reason I could do -that- is because I learned -how- to do it over the past two weeks. Something must have stuck...even though, a lot of times, it did not feel like it did. My brain has been a storage bin the past few weeks. It has taken in a lot of new, foreign, information. Its capacity was filling. The past two days, I feel like I have, finally, been able to organize that information to the point of use; I took raw data and sorted it...I made dictionaries in my mind...I added to my growing list of knowledge. While coding loops, when something needs to be added to a variable's value before looping again, we write an increase as \"a = a+1\" (or a +=1). While still the same variable, its value is now higher than it was before. It has increased. Today, I have increased. I feel my value is higher. I am Erik = Erik+1.</p>"
		},
		{
		"date":"04/27/2015",
		"title":"Catan 2.0",
		"text":"<p>Catan received its first major upgrade today! This past weekend, I thought of many more things I wanted to do with the game. ...actually -making it- a game, for one, but also, giving it more interactivity and puzzle components for a level of fun = fun+1. I definitely succeeded in doing this! Catan 2.0 was born. Now, a player (we will call him a player now, rather than a user, because I added an end-goal to the game) can pick up and drop items, die in various ways, call up a visual map to see where he is, get lost, find hidden places, interact with resources and ground elements in a puzzle-like manner...and, most importantly, win. Tinkering with the code today, I played through several times, pretending to be an unintelligent person...in other words, I tried to break the program...but couldn't. This is a very good thing. It means, unless typing in a \"quit\" command, a player will only exit the game when and only when one of two things happens; 1) He wins or 2) He dies. I created 5 new functions and a number of new dictionary entries to call upon to do this. Something I have noticed in this process is, once a developer has a usable MVP, it becomes much easier to build upon and add elements to. After my brainstorm this weekend, I created a list of all the items I wanted to add and ranked them in order of playability importance. From here, I checked each off as they were completed. ...and even though I created the game, I actually enjoy playing through and interacting with it! It is a puzzle! It is fun! --I am proud of it!</p><p>This morning, we were tasked with taking our final product and presenting it to the group again, but this time, as a developer would \"sell\" the program or add-on to management. Why should we implement it? Does it save time? Save or make money? Is it a better practice? This is to simulate how, as a professional developer, I will have to justify, explain, or refute anything pertaining to code or development. My presentation went well. In 5 minutes, I needed to justify my upgrades to our instructor as to necessitate the \"company's\" resources for development. My pitch consisted of the following hook; \"These developments will turn our product from something our customers can use into something they can play.\" That was the winning line. My upgrades were granted and my salary+1 turned into an infinite loop.* *Not really...but fun to think about!</p><p>As the day came to a close, we were given a final Monday/Funday task...a speed coding challenge. In the quickest amount of time and in the fewest lines of code, we each needed to: 1) program a MVP that allowed a user to guess a randomly generated computer number, 2) have the computer tell us if our guess was too high or too low, 3) if our guess was not correct in seven tries, we lost the game, and 4) were prompted to play again. I got through step three without a problem. Stuck on 4 for a while, I finally turned my game into a function and looped it with an \"if gamePlay=True\" statement, completing the program in 40 beautiful lines of code. I didn't win, but was impressed be my ability to do this. It was a good way to end my day and start my week. ...one that I hope is even better than last.</p>"
		},
		{
		"date":"04/28/2015",
		"title":"Wrapping Up Python",
		"text":"<p>Today was, officially, our last day of Python. Saying \"goodbye\" to this snake I've developed a love/hate relationship with, I feel like I know him, now, pretty well. It is not a perfect relationship, as I feel all learning is an ongoing process and I will never know everything of everything, but I feel I know enough to be at a working level. I know the core. Python has taught me logic. He has taught me computational thinking. He has dipped my toes into the development pool and I am eager to get in further. I hope that is all anyone can ask as I move forward in this program and continue to learn. I am comfortable with it. I am comfortable with my progress so far.</p><p>This morning we revisited our Twitter Bots from Day 1 and were asked to re-program them to perform a new, better function. As a side-note, prior to entering this program, I never really thought about the full capacity in which humans can interact with or use computers. My experiences with them consisted of, simply, me using a program for its intended purpose. I never thought about how that program could be better or what a program should be instead. As a result, and I saw it with our personal projects as well, I am limited in scope and need to expand my thinking as it pertains to my ability to imagine \"what could be.\" Computers can do anything I want them to. The sky is the limit. I need to dream big! Our bots' original purposes were to tweet back a list of user-generated lines to anyone tweeting the current, top-trending hashtag for Chicago. This was less than ideal, since, if we wanted an effective bot, we would need to update our lines multiple times each day to correspond, relevantly, with that hashtag. So, to make this bot more effective, I decided to make him a little more universal, and humorous. There is an old joke that, when reading a fortune cookie, one should say \"in bed\" after the fortune is read. It puts a humorous, albiet, slightly adult spin on it, and, depending on the fortune, can be quite funny. So, I made my bot do just this...whenever someone tweeted anything about a fortune from a fortune cookie or #fortunecookie, my bot replies with \"...in bed!\" It has been running all day and some of them are really funny!</p><p>While working on our bots, each of us were called, individually, to perform a mock tech interview/Python wrap-up test with our head instructor. When my name was called, I experienced that twinge of nerves, but, after starting, soon realized I knew the material quite well. The \"interview,\" meant to simulate what we will soon experience, consisted of a few personal questions, an oral quiz of certain Python functions, and a whiteboard challenge to write out a simple program. I felt comfortable while answering and my instructor passed me on all three! I guess he is comfortable with my progress as well! That is comforting.</p><p>To bring an end to our Python pursuits, our group sat in a circle and discussed our thoughts on the program so far. Mostly, people felt the same way I did. I made the observation that, if I could time travel back to my past self, two weeks ago, and do everything I can do today for him to see then, my past self would have thought my future self (me, now) was so cool! I know this because my past self looked at Jim that way when we created the dice game together. At that time, I could not have written that entire program. A lot of it was confusing and foreign to me. But he -could- write it and I was mesmerized by that...by him. Today, I am proud to say -I- would be able to write it. I could debug it. I could develop it...and, as a result, I have become someone I would have looked up to. That is personal growth. That is development!</p>"
		},
		{
		"date":"04/29/2015",
		"title":"Front-End Cookie",
		"text":"<p>I just received a treat! ...and after eating my vegetables for the past two weeks, I'd say I definitely deserved it! Today, we got a delicious serving of HTML and CSS!</p><p>A few years ago, I decided to take on learning the two on my own. Website development had always interested me so I diligently studied and practiced these languages to fluency. If HTML is the wall of a website's house, CSS is the paint, and over the course of three months, I built and painted all over! This stuff was really fun for me! But with anything, if you don't use it, you lose it...or in my case, pack it away neatly in the attic until I needed it again. Today, I dusted that knowledge off and found it aged very well! In our crash course, we went over basic HTML tags and CSS syntax and did three labs to understand them better. Our next big language, Java Script, will interact a great deal with these two, and we needed today's base before continuing.</p><p>I devoured this cookie today. It was so satisfying!</p>"
		},
		{
		"date":"05/01/2015",
		"title":"Javaahhhhhh",
		"text":"<p>The past two days, we started working on and learning JavaScript. JS is a high-level, dynamic language that is largely used for client-side online interactivity. If HTML and CSS are the walls and paint, respectively, JS is the person physically building that house. Normally, I would have dedicated two days to this post, complete with my feelings and thoughts, but, in an amazing swing, I don't need to! I am -really- understanding it and my thoughts are simply, \"It is great!\" I don't know if this is because I have a Python background or a greater familiarity with computational thinking, or if JS is simply an easier language to learn, but, so far, it has been smooth and exciting!</p><p>In lectures, we covered the basics, such as syntax, variables, if/else's, for/while loops, and functions. Since we went into depth with the same concepts in Python, learning JS has largely been a translation effort...I know -how- to communicate, and now simply need to learn how to express that in a different way. However, unlike going from English to German or Spanish, the transition from Python to JS has been more akin to learning a regional dialect of English. On Thursday and Friday we had 5 labs to complete. These went through the basics, but also touched on a few advanced elements. In the Fifth lab, I ran into a hitch when we needed to calculate the months, days, hours, minutes, and seconds until a date. One would think, with all the technology available, there would be a simple function or script, in any language, to automatically give us a date and/or time when requested. Not so. As it turns out, computer time is only measured in milliseconds! So, to get a time or a date, one needs to convert from this. However, this is not so easy. If I take all my date/time milliseconds and divide by how many are in a day, I am left with a remainder. Then, that remainder needs to be divided and added to the original day, and so-forth down the line until we get a value for seconds. Dividing once will only give us one value. To make matters worse, and giving me the hitch with Lab 5, that time is all measured from a starting point of January 1, 1970...Unix Time. The date we needed to calculate time-until was our next birthday. But, if one calls their birthday in Unix Time, it is actually negative because it already happened. I needed to figure out a way to negate the year and only pull the milliseconds for the month and day. I was stuck on this problem overnight and came in Friday morning with a rested view on it. This proved to be all the motivation I needed and I pounded out the code by mid-morning! It's amazing how, when the brain stops for a while, it is able to subconsciously process information better than it could have consciously. I guess this gives credit to taking breaks...and weekends!</p><p>After my labs were complete, we were presented with two coding challenges. These were fun! Unlike the last Python challenge we had, both of these focused more on computational thinking and logic than actual coding knowledge. Today we touched on a new JS element...multi-dimensional arrays. Basically, an array is a list of things. A multi-dimensional array is a list of things inside of a list of things...and possibly inside a list of things, etc, and so-forth. After two, it gets messy, but the functionality is needed to organize any object in a data library. For the first challenge, we were given the following: var x = [[[5,4,3],[1,[6,7]],0],[2,[9,[8]]]]. From this, we needed to console.log(1,2,3,4,5,6,7,8,9,0). To get a grasp on the problem, one needs to map each array. From here, I read the array and pull out it's coordinates for each number. I finished second, and with this, for the first time, felt extreme confidence in my abilities to complete this program! I think it was piggy-backed on my well-feelings about JS in general, but I am slowly seeing I really do get this stuff! That is so comforting...and awesome! Our second challenge was similar to the first, but with a looping element. Rather than just reading the array and mapping the coordinates, I needed to figure out how those coordinates changed when a value, \"i,\" started off at 0 and increased by 1 each time it looped through. Logic. I like that!</p><p>Another week, another code...we keep on moving forward 5 bits at a time. These have been productive, inspiring, and educating! I am excited to learn. I am excited to move forward. I am excited to challenge myself. I am not scared with problems I do not get at first, because I know I will. I will work through them. I will understand. I will code.</p>"
		},
		{
		"date":"05/04/2015",
		"title":"JayEs Function, What's your function?",
		"text":"<p>Today we finally entered the heart of JavaScript and were introduced to its function capabilities. Like Python, with JS I can make and call custom functions to perform tasks in programs. They are used to allow interaction and animation on, otherwise, static html pages. From an ease-of-learning standpoint, knowing computational thinking and logic allows me to transition into the different language elements more quickly. Today was more of the same. Functions, with JS, will typically run in one of two ways...after the page loads, which is referenced in the .js file, or when called by a user through elements such as page scrolls or on-clicks on html buttons, and with that, are essentially large if/else statements...if click, do this. In addition to functions, we were introduced to jQuery as well. jQuery is going to be a huge resource for me! It is a library that takes common, lengthy JavaScript functions and shortens them to one or two words! In the coding equivalent to \"a picture is worth 1000 words,\" with JS being the book, jQuery is the picture.</p><p>With our newly-stocked development ammo, I started on JS Labs No. 6 and 7. Creating functions to validating forms. When someone fills out online forms, the person can enter anything they want. They can forget info. They can have typos. So, in an effort to receive accurate and meaningful data, JS can be used to make sure the info is correct prior to the user sending it. I started off by creating an all-encompassing validate() function, but then quickly realized the code would be much neater and more debuggingly efficient if I created a separate function for each part of the form and called each in validate(). Validate() would then run on-click of the submit button in the HTML form. Like the coding challenges from last week, I really enjoyed this project as it used logic to build. The computational thinking analogy I mentioned of \"effectively teaching a dumb person\" has really stuck in my mind and I think, is allowing me to write better code...faster. After validate() was complete, I started to create additional functions in Lab 7 that I will be able to place in my own personal function library for use at a later time.</p><p>I feel, at this point, I can do the JavaScript equivalent of ask, \"Donde esta el baño?\" Where is the bathroom? I know enough to get by. I know enough to survive. I hope, in the coming weeks my fluency will grow, but for now, I am happy with where I'm at. It was a good Monday!</p>"
		},
		{
		"date":"05/05/2015",
		"title":"Wanna build a house?",
		"text":"<p>My brain is pretty much checked out writing this. In fact, I rewrote that opening sentence a few times just to get it right! I'm having trouble composing my thoughts. Needless to say, the block I'm experiencing is probably induced by the very mentally stimulating day I had, despite the amount of items I needed to complete...two.</p><p>My first task for the day was to create a form. This form needed to contain inputs for 4 items to build a house; concrete, wood, brick, and decor. From here, I also needed to create two additional inputs for price and square feet. Sounds simple, right? Wrong. The goal of this project is to have a user input data in -any- input and have calculated data output in all the rest of them. If I wanted to purchase x number of units of building materials, the price and square feet would update and show in their respective values for the user-inputed data. However, if I had a finite amount of money or wanted to build a certain size house, I could enter that input and have the form tell me how many units of each building material I needed. This is where I started running into problems...how to make all the inputs both inputs AND outputs. Getting as far as being able to calculate total cost and square feet from the four building material inputs in about an hour, I ran into a roadblock, and mental block, when trying to reverse the process. For the next 5 hours of my day, I spent the majority of the time tinkering and learning about jQuery forms. I have dollar signs flashing around in my head...and it's not because I just won the lottery! In jQuery, when calling a function, developers us a \"$.\" My code looks like a bank statement! My mind is mush. This project will be taking the back burner until tomorrow. I need time to process it.</p><p>Our second project today was to take our blogs, this, and place it into our websites as a native element...not an extra page like it is now...using JavaScript Object Notation, or JSON. JSON is a human-readable open standard format that is used to transmit data of coded objects. Back to the house analogy from JavaScript a few days ago with JS being the builder, JSON would be the toolbox we place all of our tools in. Are you seeing a pattern and connection between coding and construction? It is essentially the same thing! We are all builders! I digress. Not knowing much about JSON, our instructors intended for this lab to be largely self-study learning. So, for the last two hours in the day, I took a welcome break from jQuery form calculations and started on this new task. Just as SCRUM was called, I was able to format my JS code to read each post from the JSON file into the HTML page. JSON seems to be pretty slick. It is very high-level (i.e. human-readable), and with that, plays nicely with others...in this case HTML and CSS. I'll have more to report tomorrow after (hopefully) finishing this task.</p><p>Its amazing how only two projects completely consumed my mind! ...and the day flew by again! I'll admit, 6pm was -very- welcome today, as I feel I needed a break. It got to the point where my mind could not take in any more information. My consciousness needs a break. Subconscious, get to work!</p>"
		},
		{
		"date":"05/06/2015",
		"title":"Recap Wednesday",
		"text":"<p>Last night's rest definitely replaced my blown fuse and rebooted my system. After coffee this morning, I was ready again. Today was a workday...and while I did not get a lot of physical coding in, I did make good progress on learning more about jQuery. Currently, I have five tabs open in Sublime, my text editor; two for the construction calculator and three for this, my blog. This is my workload...definable and finite...and being the calculator is still intimidating me a bit, I gladly attacked the later all day. With not much else to report other than this, I'd like to take a look back on all the projects I have tackled in this program so far. Given the fact that I have less than 20-work-days under my belt, paired with my very limited starting-knowledge regarding development, I would say this is pretty amazing!</p><p>-Twitter Bot: Using Twitter's API and Tweepy for Python, I pulled trending hashtags from the Chicago area and auto-replied to tweets mentioning them, at random intervals, with a generated list of phrases.</p><p>-Dice Roll: After inventing a new physical random-chance dice game, I paired up with another student to develop the digital version of it in Python. This was my first experience with collaborative development and using loops, functions, and logic on a larger scale.</p><p>-Apples to Hydrogen: Our group collaborated to recreate the Python version of the game Apples to Apples. Starting with a blank text file, and going line-by-line, each member typed a line of code and alternated until our final product ran.</p><p>-HidroTwit: This was a successful attempt at mass data-mining from four major US cities. Collaborating in development over a period of time, we were each assigned multiple individual snippets to code. Once finished, we each merged our files in GitHub to create a single Python file that pulled the top trending words from the specified geographical areas, independently from Twitter's trending list. We discovered Twitter significantly filters their trending lists.</p><p>-Personal Project: Using Python, I developed a text-based adventure game that drew inspiration from the board game \"Settlers of Catan.\" In it, a player typed in commands to move around and interact with a fictional world complete with puzzles and dangers. Not wanting to have an unreadable amount of if/else statements, I taught myself how to use dictionaries and object-oriented programming for this project to minimize the length of my code.</p><p>-Twitter Bot 2.0: I revisited my Twitter Bot from Day One and reprogrammed him to reply, automatically, at set intervals, to the majority of tweets mentioning or including fortune cookie sayings with \"...in bed.\" After his first week of work, 50 people re-tweeted his responses. By and large, they made people happy with an element of fun.</p><p>-Coding Challenges: Since starting, three and a half weeks ago, we have had a number of timed coding challenges. These contests are meant to test our quick-thinking and logic skills, coupled with our coding knowledge, paired with an element of fun. Of the three, I finished second in two of them.</p><p>-Blog: I developed a functioning personal website that automatically reads daily blog posts from a JSON file using JavaScript, jQuery, Python, HTML, and CSS. The site has full search functionality of the blog and, while developing it, I was purposely given little instruction on the knowledge I needed to develop it, ensuring it would only come with self-study.</p><p>If I've done this much in only three and a half weeks, I can only imagine where I will be in 3 more!!</p>"
		},
		{
		"date":"05/07/2015",
		"title":"Blog, Blog, Everywhere a Blog!",
		"text":"<p>Over the last three days, I have worked on a project that consisted of developing a personal website to incorporate my blog.html file (this) on the index.html page rather than in a page of its own, only accessible by a link on the homepage. This project, I feel, was a significant milestone since it is the first which required me to utilize -all- of the language tools I've learned so far (JavaScript, jQuery, Python, HTML, and CSS) in one unified project. I finished it today!</p><p>To start off, I needed to make a new index.html page that would parent the previous index.html, which is now blog.html. After separating the two, I started to create content for a personal webpage in index.html with \"About Me\" sections and a space at the bottom to hold my blog posts. Much of the content was filler since I wanted to, mainly, get the blog up and running. The site content (aside from the blog) and styling will largely be a work-in-progress for the next couple of weeks, but I am very happy and excited to have a side project to work on! After creating a new site, I needed to write a JS script that recognized each entry in my blog's JSON data file. From here, I read and styled each entry into my index.html page, reversely appending each into an html div so the newest entry was at the top. Once complete, my page was very long, since, if you have been reading these posts, you can see I like to write. Leaving my page like this would make it messy and hard to navigate. Something needed to be done. Enter pagination! If you've ever been to a website that has a lot of \"something\" to show (I'm thinking Flickr or Google), you are, no doubt, familiar with pagers. They are those navigation links on a page allowing users to click through finite sections of a larger \"something\" while staying on the same page. Think \"next\" and \"previous\" or \"<<\" and \">>\"...a pager takes a lot of data and compresses it into easier-to-digest batches, perfect for smaller spaces. Bootstrap has a framework for this, but I was running into problems at the beginning and end of my list when I wanted \"newer\" and \"older\" to disappear, respectively. Bootstrap let me disable the link, but it was messy, ironically, given Bootstrap is all about making things look good. So, I removed it and decided to use CSS and JS's addClass and removeClass features with some styled text. SO much neater! These features allow me to \"display: none;\" in CSS on a selected class or ID in JS. When working with a list, each item inside the list is called a child...in the parent list or array. The first item is the first child and the last is the last. The script to paginate took the number of children in the list and divided it by the number of items I wanted on the page...initially, 5. From here, to remove the \"newer\" and \"older\" links it said, if at first child, addClass to \"newer\" link to \"display: none;\" and the same for the last. I now had all of my posts neatly contained on my page, scrollable in chunks of 5. Later I changed that number to 2 posts, due to their lengths, and made it so only my most current post would be on my homepage...simple and neat...I like that. Next, since my whole blog is getting lengthy, I added search functionality, within my blog, to the index page. To do this, I used parts of my previous script that read the JSON data into html, but, rather than posting everything, the new script searched for the words or letters a user types into a search input and reads only those posts that contain the search string into an html div as an unordered list. Unless something is found in the JSON children through the search, that div is hidden with add/removeClass. Once something is found in the JSON file that matches the input, the post in which the string is found is instantly placed, through the JS .keyup() selector, as a list item in the unordered list (similar to how Google search results instantly appear and amend as one types). Furthermore, when searching, if something is found, add/removeClass removes everything else on the homepage other than the search results to make it cleaner and easier to view. Once search was functional, I added my pager to the results div to organize them as well. Almost done. I now had two search boxes on my site. One in the blog and one at the top. My last task was to force the input from the blog search box into the search box at the top...essentially making anything typed in the blog search a shortcut to the top box. To accomplish this, I learned about and used a really cool jQuery tool called .focus(). With it, on .keydown(), I force the text from the blog search box into the top box and start the search results right under it. Any continued typing is from the top box as the blog search box disappears. Because the top search box is static at the top of the page, one can now see what is being typed rather than have it hidden somewhere on the page after search results start appearing. SO cool!</p><p>I know there is a lot more I need/want to do with my page, but for now, I am completely amazed and impressed by my progress! I am definitely getting the material and that makes me feel really good. This stuff makes sense to me. I wonder if this is because I can relate to what I'm doing with it? With Python, I ran everything in a platitudinous command prompt. I could not relate to it. It was all ones and zeros. It was sterile. I was simply a human telling a computer what to do. With JavaScript, I am still a human telling a computer what to do, but now, those instructions allow me to interact with the user interface of the whole internet! Web apps and websites, a world connected, humans interacting with other humans...for some reason, this seems so much more approachable to me. Maybe other languages allow me to do the same, and when that happens, I'll probably feel the same way towards them. But for now, JavaScript has -thoroughly- allowed me to see this. I get its purpose. I like that.</p>"
		},
		{
		"date":"05/06/2015",
		"title":"In a.bind()",
		"text":"<p>Remember that construction calculator? The one that blew a circuit on Tuesday and, as a result, intimidated me beyond belief, causing me to put it off all week? I came in this morning ready and eager to work on it. Last night, after finishing my blog, I theorized I could apply the .focus() element I used to switch search boxes in my blog project to my calculator inputs in order to auto-update them (also, the project was due today, which probably provided more than enough inspiration all on its own). But after starting on it and tinkering for a while, I realized the .focus() would not accurately translate to my particular needs. All .focus() did was move my input to another input...nothing more. Where was that JS magic? *scratches head and stares at screen* What did I need to do? *scratches head and stares at screen...longer* I tried to answer that as best as I could. For one, I needed to have all of my inputs be both inputs AND outputs. But even before that, I needed to have an input automatically cloned in another input while staying in its source input as well...and then, once that happened, do it again, but with some math added in the middle. My Google search was, quite literally, \"JavaScript functions similar to .focus().\" After some reading, and 45 minutes later, I discovered .bind()...and said a small prayer of gratitude. The .bind() function creates a new function with the same function body as the function it is being called on! I can then pass its value on to a different input field!! *the clouds separated, sun shone through, and angelic voices were heard on high* This is the tool I had been looking for!! Where had it been all this time? That didn't matter...I had it now and was not letting go! With it, and after some tinkering, I finally completed my basic task of cloning inputs. As it turns out, adding the math formulas between the two inputs was quite easy...all I had to do was create a few variables. After some more math logic, I completed the first step...calculating price and square feet from inputted material amounts. My next problem...how to make the inputs both in and out so I could apply different formulas to each input. To solve this, I drew inspiration from my validation program...simply create a function for each need...one for supplies (done), cost, and size! The solution had been there with me all along! After realizing this, I modified the supplies function to satisfy the needs of the others and then called each in a function based on which input was keyed. It's crazy how simple this actually was! I thought I was going to be working on it all day, if I finished at all. I ended up completing the project well before lunch! I was -so- proud of myself...and still am! I even did a celebratory dance in my chair. Furthermore, and it might just be because I accomplished my task, but, I think the code looked awesome also! It was clear, concise, and neat. To me, it was beautiful. I am proud of that also.</p><p>I spent my afternoon defending my whiteboard and blog projects to my instructors. I presented them and their codes, as I would in both technical and non-technical interviews, and successfully answered questions posed to me about them. I passed everything. Today was a good day!</p><p>This marks the end of my Fourth week in this program. 20 full days of coding. 1/3 of the way through. In that time, I have learned Python, JavaScript, jQuery, object-oriented programming, computational thinking and logic, Git, collaboration, APIs, started on developing my personal brand, revisited HTML and CSS, and accomplished countless developments and challenges I never could do before. I am very happy with where I am. My development as a coder is succeeding. I am excited. This is fun!</p>"
		},
		{
		"date":"05/11/2015",
		"title":"Prequel to Sequel",
		"text":"<p>On Friday, we were assigned a new personal project. Like the last in Python, this one could be of our choosing also but with the exception of the following; its parameters needed to include 4 JS libraries, be practical (no games), solve a problem based on a life interest or hobby, and have a \"Wow!\" factor when presented. Over the weekend, I combed my imagination to search for the inspiration I needed to come up with an idea, and, coming in this morning, was happy to pitch my intent to our instructors. I love the news. I love staying up with current events and knowing what is going on in the world. However, something about fulfilling this interest seriously irritates/bugs me. Whenever I read the news, I largely only learn about people dying, getting hurt, or harming others, as this seems to be the only type of news that \"sells.\" What about all the \"good\" news out there? Why can't -that- get reported as well?! Here-in-lies the source of my inspiration...creating a news aggregating website that combs the internet to find news stories that are positive and inspirational in nature...something that leaves a visitor with faith in humanity rather than frustration with it. After a brief mind-mapping session, I came to the conclusion that my process would involve three parts; 1) Getting the sources from the internet, 2) Posting them on a website, and 3) Allowing visitors to subscribe to an email list that would send them these stories on a weekly basis. After deciding to start on the back-end first, I set to work on accomplishing task number one...</p><p>Later in the day, we were introduced to a new database...Sequel, or SQL. When I worked with MongoDB for HidroTwit, I was slightly confused by the whole database process since I could not physically view the data. It was there, but I could not see it. What was going on was a mystery. With SQL and SQL Server, that data is displayed just like it would be in an Excel file...and for that, I am grateful! Along with SQL, we briefly touched on SQL Server Language and different comparisons of data. 1-1, 1-N, and N-M. These are the different calls and hierarchies when accessing data in SQL Server. The first compares one entity to one entity, the second compares one to many, and the third compares many to many. The way this particular database is layed out, I feel it is more approachable and understandable. I am hoping to use SQL, rather than MongoDB for my email subscription list and [possibly] scraped data.</p><p>As the day waned on I researched ways to get stories from a website and bring them on to mine. Unfortunately, many news sites do not have APIs. This presented a problem because I needed to figure out a way to play ball when nobody else wanted to play. Enter Scrapy. Scrapy is a Python library that, after some Python and XML code-writing on my side, will [should] scan a webpage and pull specified HTML elements and place them into a JSON file. From here, I could simply read that JSON file into my HTML page. By the end of the day, I did not write a single line of code. However, the planning process for my personal project was well under way. Tomorrow I will start with Scrapy. He seems to want to play.</p>"
		},
		{
		"date":"05/13/2015",
		"title":"Go Go Gadget Project (Part I)",
		"text":"<p>I ditched my plans to use Scrapy. Scrapy allows me to use Python to comb through defined websites and pick out pre-defined HTML elements to place them into a JSON file...and from here, I wanted to write and call some sort of artificial intelligence program to search through all of my raw data from Scrapy to find \"inspirational and positive\" articles. Originally, I would have simply used the words \"positive\" and \"inspirational\" as search parameters, but found this logic was flawed since what one person might find as inspirational (like the size of his \"masculinity\"(which I found multiple instances of online)) might not be inspirational or positive to others. My AI program, written by someone who has, collectively, less than 30 days of programming under his belt, would need to account for this subjectivity and I don't think I have the strength or know-how at this point in my training to do that. So I scrapped Scrapy and looked for other ways to accomplish this task. After searching for a while, I came to the conclusion that, for my minimum viable product, I would use code I already had written and developed for many years...the best AI (\"actual\" intelligence) I have at my disposal...my brain. Maybe it is not in my power to -write- something, now, to perform the subjective task of determining if a story is positive, but it is in my power to tell whether or not it is -all on my own.- Enter Pocket. Pocket is an application that allows a user to store articles in the cloud, to either save or read later, for access at any given time. ...and fortunately for me, they have an API! Now I could find articles online that I knew were positive and inspirational and save them to a Pocket file. Originally, I was going to use Scrapy to pull the data from these articles, but with the API, I could get all the JSON data delivered directly to my website! So, I set to work on getting the API set up. Like Tweepy, I needed to apply for authorization tokens and, in doing so, had my first experience with AJAX and Post requests. When a website needs to get data from another website on a different server, it sends an AJAX request to do so. AJAX stands for Asynchronous JavaScript and XML and is essentially a phone call.To make it, I needed to make a Post request to Pocket's website. From here, I received both my access token and key. Now it was time to start playing with the API.</p><p>As with my blog, after getting data in JSON format, I would need to comb through its file structure to pick which array elements I wanted to pull. I decided to make my first call using AJAX. *dials number* Not even a busy signal. In fact, this phone never even connected! I kept on receiving an error in my Console Log indicating I had an Access-Control-Allow-Origin error. A what? I did some research and discovered calls made from one website to another with a different domain name are actually prohibited by the security make-up of jQuery. This is done so malicious script may not be sent to infect an external website...or mine for that matter. Chrome has a nifty extension that allows me to turn \"on\" cross-origin requests (or CORS), but unless every person using my website has the same extension, nobody would be able to access the Pocket data. It should be noted, at this point in my training here, my nails on my left hand are all but gone. I am right handed, so, while using my mouse to search for fixes to my problems, I constantly bite my nails on my left hand out of habit...it's actually quite comical to look at both of my hands! I digress...I needed to write something in my code to allow that \"CORS button\" to permanently stay on...in other words, not needing the button at all. I thought about what websites naturally allow sending data cross-origin. Where on the internet -could- one do that? Email. ...and how are email requests sent? PHP. I promise you this is not a drug. PHP is a server-side scripting language that, when asked to make a call to an external website, calls from the server -itself- rather than the website, thus eliminating my origin discrepancy. We never learned PHP, though, so I took an hour to dip my toes in it and figure out how to write my call. Once able, I wrote my PHP file, referenced the returned data in my JavaScript file and then read that data into my HTML. Boom! (as Emeril would say!). Originally, I had intended for my data to pull twice each day, to limit API requests, but as it turns out, Pocket doesn't really have a limit, so I linked up my request to tie directly into my website without a separate JSON file. Now, every time someone visits my website, they are met with the most current Pocket articles I have curated...as I curate them in real time. In the future, I am hoping to revisit Scrapy to allow a more diverse collection of data, and potentially more automated, but as a MVP and with a Friday due-date, I think Pocket's API will serve me well for now.</p>"
		},
		{
		"date":"05/15/2015",
		"title":"Go Go Gadget Project (Part II)",
		"text":"<p>Now that I had my data, I could build my website around it! Since I knew I wanted to use Bootstrap to build my website, I figured a grid system would be the best way to display the news articles...nine total, in a 3X3 grid.  However, with the way my code was currently written, all articles would show up and potentially mess up this grid. To prevent this, I modified my JS code to only pull the most current 9 articles, with plans for a future iteration of this website to have an archive to display the others in pagination style. Once my back end was fully taken care of, now came the time to make this thing look good! I love this stuff...getting head-deep in styles, perfect pixel padding, and the User Experience. Most of all, I love media queries. A current trend (albeit, I feel this should be more of a standard) is making responsive websites. A responsive website is one that adjusts to any viewing device...desktop, tablet, or phone...without the need for a user to zoom in or be presented with more than he needs. A phone is small. It needs a simpler structure to view the same data. When smart phones were first introduced, a site would put out two websites...\"name.com\" and either \"m.name.com\" or \"name.mobi.\" This became tedious and cumbersome as updating anything required updating two websites. Introduced in 2000, media queries sought to eliminate this, but it took 12 years for browsers to finally create support for them. A media query basically looks at how many pixels a screen or browser window is and adjusts the pre-specified CSS accordingly. With a properly responsive website, someone should be able to scale a browser window without any need to scroll left or right...or zoom. To do this efficiently, though, takes testing and time. A well written media query should be seamless. I sought to create that.</p><p>For each article, I read the title, excerpt, and picture (if it had one) into my HTML. This was also a link to that article. However, the excerpt and title, I found, are never a set length. Some were long. Some were short. To fix this to keep a standard size and not throw off my grid, I needed to write a JavaScript function that limited the title and excerpt characters. Anything longer than my limit would get cut off and append the remaining text with \"...\". My website was coming along nicely! My last task for my MVP was to create a form that allowed a user to submit his email to subscribe and receive the daily stories via email. To do this, I needed to create a database to house the submitted emails and then a method to save all 9 stories' URLs from the day. For my MVP, I'm hoping to simply use a free service like MailChimp to accomplish the task of sending the data. I finished my form and PHP request, but was running into errors when I test-sent a request to myself. My server was not responding to the request. I did some research on this and found out my server (in this case, the local host) did not have mail capabilities installed on it...which is the type of request I was sending. This should remedy itself after I upload it to a server that does have those capabilities when my site goes live.</p><p>I spent today, Friday, tweaking the site, ensuring my data pulled smoothly and my website responsiveness was good. As this is only my MVP, a few things I would like to add in the near future include integration with Twitter's and Facebook's APIs to allow a user to post the stories to their feeds and walls respectively. I'd also like to incorporate Pocket API's Add feature which would allow users to save stories to their individual Pockets. I'd like to create a splash landing page that disappears to the news rather than scrolling and automate the story selection process more. That being said, I am happy with how far this project has come in a week. I look forward to seeing where it goes from here!</p>"
		},
		{
		"date":"05/18/2015",
		"title":"Let's Make Some Music!",
		"text":"<p>Today marked a transitional period in our training from JavaScript to C#. If Python was our ouer d'oeuvre, and JavaScript was our soup and salad, C# is going to be our main course...I'm guessing something meaty and substantial...a 16oz New York Strip, perhaps? For the next 6 weeks, more than the amount of time we spent on both Python and JS combined, we will be immersed in this new language. I'm looking forward to staying on something that long.</p><p>As with our JavaScript transition from Python, we started this transition with a written test. It included 10 questions, ranging from defining terms to correcting syntax errors to writing functions, and took about 45 minutes to complete. I did very well. I was happy. After the test, each of us presented our projects and source code to the group. In a few weeks, we will be showcasing our projects at a public Meet-Up and this was the first of many presentations that will help prepare us for that. As we transition, a few parting thoughts: JavaScript, for me, was fun. I loved learning about it and writing in it. I feel web applications and websites are tangible...they make sense to me and I understand why we need a language to interact with them...and as a result, I \"got\" it...I enjoyed it. This is a language I will probably be using, on my own, coupled with HTML and CSS, for the rest of my life. But for now, goodbye, my dear friend!</p><p>Now it's time to make some music! C#, or C#.NET is a strongly-typed, type-safe, object oriented programming language that allows us to write on the .NET framework. I promise you I did not pull that from Google! In programming, there are both strong and weak typed languages. JS and Python are considered weak, or loose...meaning the language largely guesses what you mean when you write certain things...i.e. you assign a variable and it guesses if that variable is a string or an integer or an array. In C#, being a strongly-typed language, we now have to define if that variable is a string or an integer or an array...it won't guess. This is considered superior to weakly-typed languages because, without that added input, a weak-language may produce unpredictable results or perform implicit type conversions...I haven't seen it yet, but hey...I've only been doing this for 30 days! Type-safe simply means that the program prevents type errors and object-oriented means the bulk of what we program in C# uses defined objects...which I first learned on my own when making my Catan game. The whole thing runs on Microsoft's .NET framework which is kind of like a set of rules the language follows. Today was a definite primary introduction. We had two lectures and two labs and started to get familiar with Visual Studio...a text editor that plays very well with C#.NET.</p><p>My initial thoughts on today's experience are mixed. I am excited to move on and learn a new language, however, after my introduction to C# today, know it will be nothing like JavaScript. It is very console-based. Binary. Black and white. That could be good or bad, but for now, the uncertainty leaves me uncertain. I don't know what this is capable of yet. I hope over the next few days, exposure will help me formulate a better opinion. Either way, I am excited we will be working on this for the next month and a half. At least there is continuity and comfort in that!</p>"
		},
		{
		"date":"05/19/2015",
		"title":"How do you like your data?",
		"text":"<p>After an easier transitional day yesterday, today brought a more learning-intensive introduction to C#. The main topic? Data types! As a strongly-typed language, C# requires us to define every variable we write. Gone are the days of simply saying x = \"red\". Now, we have to say String x = \"red\" or Int x = 10 or Boolean x = false. We need to define -all- of our data so C# can compile accurately...it will not guess what we mean. ...and given the only two programming languages I know do not operate this way, it will take some getting used to. Another big difference between JS and Python, and C# is compilation. When I ran code in JavaScript, it would interpret the source code line-by-line until the end. It was regimented. If there was an error, it would simply cross that bridge when it got to it and not let me go further. As a result, JavaScript and Python are called interpreted languages. C# is just the opposite. When code is ran in C#, first it is compiled, meaning an executable (or machine code) is generated from the source code. If there is an error, I will not be able to compile my code at all...let alone run it. Compilation allows code to run faster since it knows what to expect. As a result, more labor-intensive and heavy-lifting languages tend to be complied. My jury is still out on the benefits or disadvantages of this process. After lecture, three labs were pushed that familiarized us with common data types and all the different ways we can create and change them. I don't think it will be difficult to do this, but rather new...it will take some getting used to. ...and I am definitely used to -that- by now!</p><p>After lunch we were treated to an informative lecture on IT administration. Since what we do in software development is largely contained on IT networks, this was a welcome session. I have used networks and the internet and servers for my entire adult life, but not once did I ever stop to wonder how it all works...because it just did. I know if I turn on my computer and click on a web browser I can access any website...but why? How? What the heck is a server? What is an IP address used for? Over the next few weeks, I hope to pair answers with these now-developed questions I have. Today's lecture just introduced us to the broad topic of IT administration but definitely whet my appetite for more.</p><p>Whenever a lab gets placed to our app server, I always have to copy and paste it into my coursework folder. This is annoying. Only...I didn't realize it was annoying until my instructor suggested it may be, today! Yesterday I wanted to see a benefit of C#...what could it do for me? How could it help? What could I program? He showed me a program he wrote that could tell what each network port was assigned to, and it was interesting, but I couldn't relate. Today, after realizing that, yes, copying and pasting -is- a redundant task, I was introduced to how C# could help ME! Given that neither source nor destination folder change when copying and pasting labs, couldn't I write a program that automated this task? Oh boy, could I ever! ...and he showed me how in a group coding walk-through. A lot of the code was advanced for this point in my training, but after finishing it, my excitement for the power of this language grew. I just fully automated a redundant task...making my life easier! ...and isn't that what computers are supposed to do? Isn't that why I am learning this stuff? That was an \"ah-ha\" moment for me! The powers of machines are at my fingertips! They are awaiting my orders. I just have to tell them what to do! As this course progresses, I have been able to better understand the full potential of that. I think it is amazing! I look forward to understanding it even more!</p>"
		}
	]
}